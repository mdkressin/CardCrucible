{"Structs/WarGameView_Previews.html#/s:7SwiftUI15PreviewProviderP8previews8PreviewsQzvpZ":{"name":"previews","parent_name":"WarGameView_Previews"},"Structs/WarGameView.html#/s:7SwiftUI4ViewP4body4BodyQzvp":{"name":"body","parent_name":"WarGameView"},"Structs/StartViewController_Previews.html#/s:7SwiftUI15PreviewProviderP8previews8PreviewsQzvpZ":{"name":"previews","parent_name":"StartViewController_Previews"},"Structs/StartViewController.html#/s:7SwiftUI4ViewP4body4BodyQzvp":{"name":"body","parent_name":"StartViewController"},"Structs/DeckImage_Previews.html#/s:7SwiftUI15PreviewProviderP8previews8PreviewsQzvpZ":{"name":"previews","parent_name":"DeckImage_Previews"},"Structs/DeckImage.html#/s:12CardCrucible9DeckImageV8blueBackSSvp":{"name":"blueBack","abstract":"<p>Undocumented</p>","parent_name":"DeckImage"},"Structs/DeckImage.html#/s:12CardCrucible9DeckImageV7redBackSSvp":{"name":"redBack","abstract":"<p>Undocumented</p>","parent_name":"DeckImage"},"Structs/DeckImage.html#/s:12CardCrucible9DeckImageV10purpleBackSSvp":{"name":"purpleBack","abstract":"<p>Undocumented</p>","parent_name":"DeckImage"},"Structs/DeckImage.html#/s:12CardCrucible9DeckImageV8grayBackSSvp":{"name":"grayBack","abstract":"<p>Undocumented</p>","parent_name":"DeckImage"},"Structs/DeckImage.html#/s:12CardCrucible9DeckImageV10yellowBackSSvp":{"name":"yellowBack","abstract":"<p>Undocumented</p>","parent_name":"DeckImage"},"Structs/DeckImage.html#/s:12CardCrucible9DeckImageV9greenBackSSvp":{"name":"greenBack","abstract":"<p>Undocumented</p>","parent_name":"DeckImage"},"Structs/DeckImage.html#/s:12CardCrucible9DeckImageV10widthRatio12CoreGraphics7CGFloatVvp":{"name":"widthRatio","abstract":"<p>Undocumented</p>","parent_name":"DeckImage"},"Structs/DeckImage.html#/s:12CardCrucible9DeckImageV01xC10SizeOffset12CoreGraphics7CGFloatVvp":{"name":"xDeckSizeOffset","abstract":"<p>Undocumented</p>","parent_name":"DeckImage"},"Structs/DeckImage.html#/s:12CardCrucible9DeckImageV11heightRatio12CoreGraphics7CGFloatVvp":{"name":"heightRatio","abstract":"<p>Undocumented</p>","parent_name":"DeckImage"},"Structs/DeckImage.html#/s:12CardCrucible9DeckImageV01yC10SizeOffset12CoreGraphics7CGFloatVvp":{"name":"yDeckSizeOffset","abstract":"<p>Undocumented</p>","parent_name":"DeckImage"},"Structs/DeckImage.html#/s:12CardCrucible9DeckImageV11resizeRatio12CoreGraphics7CGFloatVvp":{"name":"resizeRatio","abstract":"<p>Undocumented</p>","parent_name":"DeckImage"},"Structs/DeckImage.html#/s:12CardCrucible9DeckImageV9backColorSSvp":{"name":"backColor","abstract":"<p>Undocumented</p>","parent_name":"DeckImage"},"Structs/DeckImage.html#/s:12CardCrucible9DeckImageV9imageNameSSvp":{"name":"imageName","abstract":"<p>Undocumented</p>","parent_name":"DeckImage"},"Structs/DeckImage.html#/s:12CardCrucible9DeckImageV5color7SwiftUI5ColorVvp":{"name":"color","abstract":"<p>Undocumented</p>","parent_name":"DeckImage"},"Structs/DeckImage.html#/s:12CardCrucible9DeckImageV8deckSizeSivp":{"name":"deckSize","abstract":"<p>Undocumented</p>","parent_name":"DeckImage"},"Structs/DeckImage.html#/s:7SwiftUI4ViewP4body4BodyQzvp":{"name":"body","parent_name":"DeckImage"},"Structs/ContentView_Previews.html#/s:7SwiftUI15PreviewProviderP8previews8PreviewsQzvpZ":{"name":"previews","parent_name":"ContentView_Previews"},"Structs/ContentView.html#/s:12CardCrucible11ContentViewV7counterSivp":{"name":"counter","abstract":"<p>Undocumented</p>","parent_name":"ContentView"},"Structs/ContentView.html#/s:7SwiftUI4ViewP4body4BodyQzvp":{"name":"body","parent_name":"ContentView"},"Structs/CardImage_Previews.html#/s:7SwiftUI15PreviewProviderP8previews8PreviewsQzvpZ":{"name":"previews","parent_name":"CardImage_Previews"},"Structs/CardImage.html#/s:12CardCrucible0A5ImageV10widthRatio12CoreGraphics7CGFloatVvp":{"name":"widthRatio","abstract":"<p>Undocumented</p>","parent_name":"CardImage"},"Structs/CardImage.html#/s:12CardCrucible0A5ImageV11heightRatio12CoreGraphics7CGFloatVvp":{"name":"heightRatio","abstract":"<p>Undocumented</p>","parent_name":"CardImage"},"Structs/CardImage.html#/s:12CardCrucible0A5ImageV11resizeRatio12CoreGraphics7CGFloatVvp":{"name":"resizeRatio","abstract":"<p>Undocumented</p>","parent_name":"CardImage"},"Structs/CardImage.html#/s:12CardCrucible0A5ImageV9imageNameSSvp":{"name":"imageName","abstract":"<p>Undocumented</p>","parent_name":"CardImage"},"Structs/CardImage.html#/s:7SwiftUI4ViewP4body4BodyQzvp":{"name":"body","parent_name":"CardImage"},"Structs/Deck/AllowedNumSubDecks.html#/s:12CardCrucible4DeckV18AllowedNumSubDecksV03maxefG0SivpZ":{"name":"maxNumSubDecks","abstract":"<p>The maximum amount of sub-decks allowed</p>","parent_name":"AllowedNumSubDecks"},"Structs/Deck/AllowedNumSubDecks.html#/s:12CardCrucible4DeckV18AllowedNumSubDecksV03minefG0SivpZ":{"name":"minNumSubDecks","abstract":"<p>The minimum amount of sub-decks allowed</p>","parent_name":"AllowedNumSubDecks"},"Structs/Deck/AllowedNumSubDecks.html#/s:12CardCrucible4DeckV18AllowedNumSubDecksV03numfG0Sivp":{"name":"numSubDecks","abstract":"<p>The number of sub-decks that has been forced within the minimum and","parent_name":"AllowedNumSubDecks"},"Structs/Deck/AllowedNumSubDecks.html#/s:12CardCrucible4DeckV18AllowedNumSubDecksV12wrappedValueAESi_tcfc":{"name":"init(wrappedValue:)","abstract":"<p>Undocumented</p>","parent_name":"AllowedNumSubDecks"},"Structs/Deck/AllowedNumSubDecks.html#/s:12CardCrucible4DeckV18AllowedNumSubDecksV12wrappedValueSivp":{"name":"wrappedValue","abstract":"<p>Undocumented</p>","parent_name":"AllowedNumSubDecks"},"Structs/Deck/AllowedNumSubDecks.html":{"name":"AllowedNumSubDecks","abstract":"<p>Ensures that there is an upper and lower limit for the amount of sub-decks allowed for","parent_name":"Deck"},"Structs/Deck.html#/s:12CardCrucible4DeckV07defaultC4SizeSivpZ":{"name":"defaultDeckSize","abstract":"<p>The default amount of cards inside a single sub-deck</p>","parent_name":"Deck"},"Structs/Deck.html#/s:12CardCrucible4DeckV9deckCardsSayAA0A0VGvp":{"name":"deckCards","abstract":"<p>Getter for the main deck (also a setter if the main deck is empty).</p>","parent_name":"Deck"},"Structs/Deck.html#/s:12CardCrucible4DeckV8deckSizeSivp":{"name":"deckSize","abstract":"<p>Getter for the amount of cards in the main deck</p>","parent_name":"Deck"},"Structs/Deck.html#/s:12CardCrucible4DeckV11numSubDecks7shuffleACSi_Sbtcfc":{"name":"init(numSubDecks:shuffle:)","abstract":"<p>Initializes a new deck that has a specified number of sub-decks within it and has the possibility of being shuffled by default.</p>","parent_name":"Deck"},"Structs/Deck.html#/s:12CardCrucible4DeckV20determineHighestRank2inAA0A0V0F0OSayAGG_tFZ":{"name":"determineHighestRank(in:)","abstract":"<p>Determines the highest card rank inside an array of cards</p>","parent_name":"Deck"},"Structs/Deck.html#/s:12CardCrucible4DeckV06createC011numSubDecksSayAA0A0VGSi_tF":{"name":"createDeck(numSubDecks:)","abstract":"<p>Creates the cards for the main deck according to the specified number of sub-decks.</p>","parent_name":"Deck"},"Structs/Deck.html#/s:12CardCrucible4DeckV06createC011numSubDecksSayAA0A0VGSi_tFZ":{"name":"createDeck(numSubDecks:)","abstract":"<p>Creates the cards for a main deck according to the specified number of sub-decks.</p>","parent_name":"Deck"},"Structs/Deck.html#/s:12CardCrucible4DeckV014createShuffledC011numSubDecksSayAA0A0VGSi_tF":{"name":"createShuffledDeck(numSubDecks:)","abstract":"<p>Create a fresh, shuffled deck that contains the specified amount of sub-decks.</p>","parent_name":"Deck"},"Structs/Deck.html#/s:12CardCrucible4DeckV014createShuffledC011numSubDecksSayAA0A0VGSi_tFZ":{"name":"createShuffledDeck(numSubDecks:)","abstract":"<p>Create a fresh, shuffled deck that contains the specified amount of sub-decks.</p>","parent_name":"Deck"},"Structs/Deck.html#/s:12CardCrucible4DeckV7shuffleSayAA0A0VGyF":{"name":"shuffle()","abstract":"<p>Shuffle the main deck of cards by changing the ordering of the card array.</p>","parent_name":"Deck"},"Structs/Deck.html#/s:12CardCrucible4DeckV7shuffle4deckSayAA0A0VGAH_tFZ":{"name":"shuffle(deck:)","abstract":"<p>Shuffle a deck of cards by changing the ordering of the card array.</p>","parent_name":"Deck"},"Structs/Deck.html#/s:12CardCrucible4DeckV04drawA0AA0A0VyKF":{"name":"drawCard()","abstract":"<p>Draw the card from the top of the main deck (0th index)</p>","parent_name":"Deck"},"Structs/Deck.html#/s:12CardCrucible4DeckV04drawA04fromAA0A0VSayAGGz_tKFZ":{"name":"drawCard(from:)","abstract":"<p>Draw the card from the top of the passed in deck (0th index)</p>","parent_name":"Deck"},"Structs/Deck.html#/s:12CardCrucible4DeckV9drawCards0D6AmountSayAA0A0VGSi_tKF":{"name":"drawCards(drawAmount:)","abstract":"<p>Allow multiple cards to be drawn from the top of the deck (starting at the 0th index)</p>","parent_name":"Deck"},"Structs/Deck.html#/s:12CardCrucible4DeckV9drawCards0D6Amount4fromSayAA0A0VGSi_AIztKFZ":{"name":"drawCards(drawAmount:from:)","abstract":"<p>Allow multiple cards to be drawn from the top of the passed in deck (starting at the 0th index)</p>","parent_name":"Deck"},"Structs/Deck.html#/s:12CardCrucible4DeckV010drawRandomA0AA0A0VyKF":{"name":"drawRandomCard()","abstract":"<p>Allow card to be drawn randomly from deck.</p>","parent_name":"Deck"},"Structs/Deck.html#/s:12CardCrucible4DeckV010drawRandomA0yAA0A0VSayAFGzKFZ":{"name":"drawRandomCard(_:)","abstract":"<p>Allow card to be drawn randomly from an array of cards.</p>","parent_name":"Deck"},"Structs/Deck.html#/s:12CardCrucible4DeckV15drawRandomCards0D6AmountSayAA0A0VGSi_tKF":{"name":"drawRandomCards(drawAmount:)","abstract":"<p>Allow multiple cards to be drawn randomly from the deck</p>","parent_name":"Deck"},"Structs/Deck.html#/s:12CardCrucible4DeckV15drawRandomCards0D6Amount4fromSayAA0A0VGSi_AIztKFZ":{"name":"drawRandomCards(drawAmount:from:)","abstract":"<p>Allow multiple cards to be drawn randomly from an array of cards</p>","parent_name":"Deck"},"Structs/Deck.html#/s:12CardCrucible4DeckV2eeoiySbAC_ACtFZ":{"name":"==(_:_:)","abstract":"<p>Compares two Deck objects to see if they are equivalent</p>","parent_name":"Deck"},"Structs/Card/Rank.html#/s:12CardCrucible0A0V4RankO3twoyA2EmF":{"name":"two","abstract":"<p>Undocumented</p>","parent_name":"Rank"},"Structs/Card/Rank.html#/s:12CardCrucible0A0V4RankO5threeyA2EmF":{"name":"three","abstract":"<p>Undocumented</p>","parent_name":"Rank"},"Structs/Card/Rank.html#/s:12CardCrucible0A0V4RankO4fouryA2EmF":{"name":"four","abstract":"<p>Undocumented</p>","parent_name":"Rank"},"Structs/Card/Rank.html#/s:12CardCrucible0A0V4RankO4fiveyA2EmF":{"name":"five","abstract":"<p>Undocumented</p>","parent_name":"Rank"},"Structs/Card/Rank.html#/s:12CardCrucible0A0V4RankO3sixyA2EmF":{"name":"six","abstract":"<p>Undocumented</p>","parent_name":"Rank"},"Structs/Card/Rank.html#/s:12CardCrucible0A0V4RankO5sevenyA2EmF":{"name":"seven","abstract":"<p>Undocumented</p>","parent_name":"Rank"},"Structs/Card/Rank.html#/s:12CardCrucible0A0V4RankO5eightyA2EmF":{"name":"eight","abstract":"<p>Undocumented</p>","parent_name":"Rank"},"Structs/Card/Rank.html#/s:12CardCrucible0A0V4RankO4nineyA2EmF":{"name":"nine","abstract":"<p>Undocumented</p>","parent_name":"Rank"},"Structs/Card/Rank.html#/s:12CardCrucible0A0V4RankO3tenyA2EmF":{"name":"ten","abstract":"<p>Undocumented</p>","parent_name":"Rank"},"Structs/Card/Rank.html#/s:12CardCrucible0A0V4RankO4jackyA2EmF":{"name":"jack","abstract":"<p>Undocumented</p>","parent_name":"Rank"},"Structs/Card/Rank.html#/s:12CardCrucible0A0V4RankO5queenyA2EmF":{"name":"queen","abstract":"<p>Undocumented</p>","parent_name":"Rank"},"Structs/Card/Rank.html#/s:12CardCrucible0A0V4RankO4kingyA2EmF":{"name":"king","abstract":"<p>Undocumented</p>","parent_name":"Rank"},"Structs/Card/Rank.html#/s:12CardCrucible0A0V4RankO3aceyA2EmF":{"name":"ace","abstract":"<p>Undocumented</p>","parent_name":"Rank"},"Structs/Card/Rank.html#/s:12CardCrucible0A0V4RankO10fromString06stringC0AESgSS_tFZ":{"name":"fromString(stringRank:)","abstract":"<p>Get the equivalent rank of the passed in string</p>","parent_name":"Rank"},"Structs/Card/Rank.html#/s:12CardCrucible0A0V4RankO8toString4rankSSAE_tFZ":{"name":"toString(rank:)","abstract":"<p>Converts the given rank to its equivalent String value</p>","parent_name":"Rank"},"Structs/Card/Rank.html#/s:SL1loiySbx_xtFZ":{"name":"<(_:_:)","parent_name":"Rank"},"Structs/Card/Suit.html#/s:12CardCrucible0A0V4SuitO5clubsyA2EmF":{"name":"clubs","abstract":"<p>Undocumented</p>","parent_name":"Suit"},"Structs/Card/Suit.html#/s:12CardCrucible0A0V4SuitO8diamondsyA2EmF":{"name":"diamonds","abstract":"<p>Undocumented</p>","parent_name":"Suit"},"Structs/Card/Suit.html#/s:12CardCrucible0A0V4SuitO6heartsyA2EmF":{"name":"hearts","abstract":"<p>Undocumented</p>","parent_name":"Suit"},"Structs/Card/Suit.html#/s:12CardCrucible0A0V4SuitO6spadesyA2EmF":{"name":"spades","abstract":"<p>Undocumented</p>","parent_name":"Suit"},"Structs/Card/Suit.html#/s:SL1loiySbx_xtFZ":{"name":"<(_:_:)","parent_name":"Suit"},"Structs/Card/Suit.html":{"name":"Suit","abstract":"<p>The Suit of the card</p>","parent_name":"Card"},"Structs/Card/Rank.html":{"name":"Rank","abstract":"<p>The Rank of the card</p>","parent_name":"Card"},"Structs/Card.html#/s:12CardCrucible0A0V4suitAC4SuitOvp":{"name":"suit","abstract":"<p>The suit that the card belongs to,</p>","parent_name":"Card"},"Structs/Card.html#/s:12CardCrucible0A0V4rankAC4RankOvp":{"name":"rank","abstract":"<p>The rank that the card possesses.</p>","parent_name":"Card"},"Structs/Card.html#/s:12CardCrucible0A0V9cardValueSivp":{"name":"cardValue","abstract":"<p>The value associated with the card&rsquo;s rank.</p>","parent_name":"Card"},"Structs/Card.html#/s:12CardCrucible0A0V11descriptionSSvp":{"name":"description","abstract":"<p>The description of the card&rsquo;s suit, rank, and card value.</p>","parent_name":"Card"},"Structs/Card.html#/s:12CardCrucible0A0V4nameSSvp":{"name":"name","abstract":"<p>String value representing the card&rsquo;s rank and suit</p>","parent_name":"Card"},"Structs/Card.html#/s:12CardCrucible0A0V9suitValue04rankD0A2C4SuitO_AC4RankOtcfc":{"name":"init(suitValue:rankValue:)","abstract":"<p>Initializes a playing card</p>","parent_name":"Card"},"Structs/Card.html#/s:12CardCrucible0A0V10printCardsyySayACGFZ":{"name":"printCards(_:)","abstract":"<p>Constructs a string containing all of the cards inside of the card array and then prints the string.</p>","parent_name":"Card"},"Structs/Card.html#/s:12CardCrucible0A0V2eeoiySbAC_ACtFZ":{"name":"==(_:_:)","abstract":"<p>Two cards are the same if they possess the same suit, rank, and card value</p>","parent_name":"Card"},"Structs/Card.html#/s:12CardCrucible0A0V1loiySbAC_ACtFZ":{"name":"<(_:_:)","abstract":"<p>Compare the card values of two cards</p>","parent_name":"Card"},"Structs/Card.html#/s:12CardCrucible0A0V5image7SwiftUI5ImageVvp":{"name":"image","abstract":"<p>Undocumented</p>","parent_name":"Card"},"Structs/Card.html":{"name":"Card","abstract":"<p>An object used in multiple games, consisting of a Card suit and a Card rank</p>"},"Structs/Deck.html":{"name":"Deck","abstract":"<p>A main deck containing 0-10 (inclusive) sub-decks, with each sub-deck containing all 52 individual cards</p>"},"Structs/CardImage.html":{"name":"CardImage","abstract":"<p>Undocumented</p>"},"Structs/CardImage_Previews.html":{"name":"CardImage_Previews","abstract":"<p>Undocumented</p>"},"Structs/ContentView.html":{"name":"ContentView","abstract":"<p>Undocumented</p>"},"Structs/ContentView_Previews.html":{"name":"ContentView_Previews","abstract":"<p>Undocumented</p>"},"Structs/DeckImage.html":{"name":"DeckImage","abstract":"<p>Undocumented</p>"},"Structs/DeckImage_Previews.html":{"name":"DeckImage_Previews","abstract":"<p>Undocumented</p>"},"Structs/StartViewController.html":{"name":"StartViewController","abstract":"<p>Undocumented</p>"},"Structs/StartViewController_Previews.html":{"name":"StartViewController_Previews","abstract":"<p>Undocumented</p>"},"Structs/WarGameView.html":{"name":"WarGameView","abstract":"<p>Undocumented</p>"},"Structs/WarGameView_Previews.html":{"name":"WarGameView_Previews","abstract":"<p>Undocumented</p>"},"Protocols/CardGame.html#/s:12CardCrucible0A4GameP11numSubDecksxSi_tcfc":{"name":"init(numSubDecks:)","abstract":"<p>Initialize a card game</p>","parent_name":"CardGame"},"Protocols/CardGame.html#/s:12CardCrucible0A4GameP9addPlayer6playeryAA0E0C_tF":{"name":"addPlayer(player:)","abstract":"<p>Add a player to the game</p>","parent_name":"CardGame"},"Protocols/CardGame.html#/s:12CardCrucible0A4GameP9dealCardsyyF":{"name":"dealCards()","abstract":"<p>Distribute the game&rsquo;s deck of cards according to the rules of the game being played</p>","parent_name":"CardGame"},"Protocols/CardGame.html#/s:12CardCrucible0A4GameP05startC0yyF":{"name":"startGame()","abstract":"<p>Start the game</p>","parent_name":"CardGame"},"Protocols/CardGame.html":{"name":"CardGame","abstract":"<p>The basic requirements that a card game should adhere to</p>"},"Functions.html#/s:12CardCrucible2edoiySbSayAA0A0VG_AEtF":{"name":"=/(_:_:)","abstract":"<p>Undocumented</p>"},"Enums/DeckError.html#/s:12CardCrucible9DeckErrorO013drawFromEmptyC0yA2CmF":{"name":"drawFromEmptyDeck","abstract":"<p>There are 0 cards inside the deck being drawn from.</p>","parent_name":"DeckError"},"Enums/DeckError.html#/s:12CardCrucible9DeckErrorO26insufficientCardsRemainingyACSayAA0A0VG_SStcACmF":{"name":"insufficientCardsRemaining(cardsDrawn:message:)","abstract":"<p>The draw amount is greater than the amount of cards in the deck.</p>","parent_name":"DeckError"},"Enums/DeckError.html#/s:12CardCrucible9DeckErrorO19negativeDrawAttemptyA2CmF":{"name":"negativeDrawAttempt","abstract":"<p>Tried to draw a negative amount of cards from a deck</p>","parent_name":"DeckError"},"Enums/GameEvent.html#/s:12CardCrucible9GameEventO4drawyACSaySSG_tcACmF":{"name":"draw(players:)","abstract":"<p>The game or round ended in a war</p>","parent_name":"GameEvent"},"Enums/GameEvent.html":{"name":"GameEvent","abstract":"<p>Signifies different possible events that can occur during a game.</p>"},"Enums/DeckError.html":{"name":"DeckError","abstract":"<p>Possible errors that can arise from using the Deck struct</p>"},"Classes/TournamentPlayer.html#/s:12CardCrucible16TournamentPlayerC12isEliminatedSbvp":{"name":"isEliminated","abstract":"<p>Gets whether player has been eliminated yet and sets whether players has been eliminated yet</p>","parent_name":"TournamentPlayer"},"Classes/TournamentPlayer.html#/s:12CardCrucible16TournamentPlayerC15isNotEliminatedSbvp":{"name":"isNotEliminated","abstract":"<p>Gets whether player has not been eliminated yet and sets whether players has not been eliminated yet</p>","parent_name":"TournamentPlayer"},"Classes/TournamentPlayer.html#/s:12CardCrucible16TournamentPlayerCyACSScfc":{"name":"init(_:)","abstract":"<p>Create a new TournamentPlayer object</p>","parent_name":"TournamentPlayer"},"Classes/TournamentPlayer.html#/s:12CardCrucible16TournamentPlayerCyAcA0D0Ccfc":{"name":"init(_:)","abstract":"<p>Construct a TournamentPlayer object from a Player object</p>","parent_name":"TournamentPlayer"},"Classes/TournamentPlayer.html#/s:12CardCrucible16TournamentPlayerCyACSS_10Foundation4UUIDVSayAA0A0VGtcfc":{"name":"init(_:_:_:)","abstract":"<p>Construct a new TournamentPlayer object</p>","parent_name":"TournamentPlayer"},"Classes/TournamentPlayer.html#/s:12CardCrucible16TournamentPlayerC02toC7PlayersySayACGSayAA0D0CGFZ":{"name":"toTournamentPlayers(_:)","abstract":"<p>Takes an array of Players and returns them as an array of TournamentPlayers</p>","parent_name":"TournamentPlayer"},"Classes/TournamentPlayer.html#/s:12CardCrucible16TournamentPlayerC4copy4withyp10ObjectiveC6NSZoneVSg_tF":{"name":"copy(with:)","abstract":"<p>Construct a copy of the TournamentPlayer object and return it</p>","parent_name":"TournamentPlayer"},"Classes/SceneDelegate.html#/c:@M@CardCrucible@objc(cs)SceneDelegate(py)window":{"name":"window","abstract":"<p>Undocumented</p>","parent_name":"SceneDelegate"},"Classes/SceneDelegate.html#/c:@M@CardCrucible@objc(cs)SceneDelegate(im)scene:willConnectToSession:options:":{"name":"scene(_:willConnectTo:options:)","abstract":"<p>Undocumented</p>","parent_name":"SceneDelegate"},"Classes/SceneDelegate.html#/c:@M@CardCrucible@objc(cs)SceneDelegate(im)sceneDidDisconnect:":{"name":"sceneDidDisconnect(_:)","abstract":"<p>Undocumented</p>","parent_name":"SceneDelegate"},"Classes/SceneDelegate.html#/c:@M@CardCrucible@objc(cs)SceneDelegate(im)sceneDidBecomeActive:":{"name":"sceneDidBecomeActive(_:)","abstract":"<p>Undocumented</p>","parent_name":"SceneDelegate"},"Classes/SceneDelegate.html#/c:@M@CardCrucible@objc(cs)SceneDelegate(im)sceneWillResignActive:":{"name":"sceneWillResignActive(_:)","abstract":"<p>Undocumented</p>","parent_name":"SceneDelegate"},"Classes/SceneDelegate.html#/c:@M@CardCrucible@objc(cs)SceneDelegate(im)sceneWillEnterForeground:":{"name":"sceneWillEnterForeground(_:)","abstract":"<p>Undocumented</p>","parent_name":"SceneDelegate"},"Classes/SceneDelegate.html#/c:@M@CardCrucible@objc(cs)SceneDelegate(im)sceneDidEnterBackground:":{"name":"sceneDidEnterBackground(_:)","abstract":"<p>Undocumented</p>","parent_name":"SceneDelegate"},"Classes/Player.html#/s:12CardCrucible6PlayerC4nameSSvp":{"name":"name","abstract":"<p>The name of the player</p>","parent_name":"Player"},"Classes/Player.html#/s:12CardCrucible6PlayerC8playerID10Foundation4UUIDVvp":{"name":"playerID","abstract":"<p>The unique id of the player</p>","parent_name":"Player"},"Classes/Player.html#/s:12CardCrucible6PlayerC2idSSvp":{"name":"id","abstract":"<p>Gets the unique string representing the player&rsquo;s id</p>","parent_name":"Player"},"Classes/Player.html#/s:12CardCrucible6PlayerC5cardsSayAA0A0VGvp":{"name":"cards","abstract":"<p>The cards that the player holds (a.k.a. hand)</p>","parent_name":"Player"},"Classes/Player.html#/s:12CardCrucible6PlayerC8numCardsSivp":{"name":"numCards","abstract":"<p>The number of cards the player currently has</p>","parent_name":"Player"},"Classes/Player.html#/s:12CardCrucible6PlayerC5scoreSiSgvp":{"name":"score","abstract":"<p>The player&rsquo;s score in the game</p>","parent_name":"Player"},"Classes/Player.html#/s:12CardCrucible6PlayerC010lastPlayedA0AA0A0VSgvp":{"name":"lastPlayedCard","abstract":"<p>The last card that was played by the player</p>","parent_name":"Player"},"Classes/Player.html#/s:12CardCrucible6PlayerCyACSS_10Foundation4UUIDVSayAA0A0VGtcfc":{"name":"init(_:_:_:)","abstract":"<p>Initializes a brand new player with the given name as well as a unique id and an empty array of cards or it can be used by subclasses to transform a Player object into an object of one of its subclasses</p>","parent_name":"Player"},"Classes/Player.html#/s:12CardCrucible6PlayerC10addToCardsyyAA0A0VF":{"name":"addToCards(_:)","abstract":"<p>Adds a new card to the cards that the player already has</p>","parent_name":"Player"},"Classes/Player.html#/s:12CardCrucible6PlayerC10addToCardsyySayAA0A0VGF":{"name":"addToCards(_:)","abstract":"<p>Adds a group of new cards to the cards that the player already has</p>","parent_name":"Player"},"Classes/Player.html#/s:12CardCrucible6PlayerC2eeoiySbAC_ACtFZ":{"name":"==(_:_:)","abstract":"<p>A shallow evaluation of whether two Player objects represent the same player.</p>","parent_name":"Player"},"Classes/Player.html#/s:SH4hash4intoys6HasherVz_tF":{"name":"hash(into:)","parent_name":"Player"},"Classes/Player.html#/s:12CardCrucible6PlayerC1loiySbAC_ACtFZ":{"name":"<(_:_:)","abstract":"<p>Allows a sense of ordering to be applied to Player objects</p>","parent_name":"Player"},"Classes/Player.html#/s:12CardCrucible6PlayerC2edoiySbAC_ACtFZ":{"name":"=/(_:_:)","abstract":"<p>A deeper evaluation of whether two Player objects represent  the same player.</p>","parent_name":"Player"},"Classes/Player.html#/s:12CardCrucible6PlayerC4copy4withyp10ObjectiveC6NSZoneVSg_tF":{"name":"copy(with:)","abstract":"<p>Construct a copy of the Player object and return it</p>","parent_name":"Player"},"Classes/War.html#/s:12CardCrucible3WarC014cardsNeededForC0SivpZ":{"name":"cardsNeededForWar","abstract":"<p>The number of cards a player must have in order to participate in war</p>","parent_name":"War"},"Classes/War.html#/s:12CardCrucible3WarC11roundWinnerSSSgvp":{"name":"roundWinner","abstract":"<p>The id of the player who won the round</p>","parent_name":"War"},"Classes/War.html#/s:12CardCrucible3WarC11numSubDecksACSi_tcfc":{"name":"init(numSubDecks:)","abstract":"<p>Initializes a new game with a deck containing the specified amount of subdecks</p>","parent_name":"War"},"Classes/War.html#/s:12CardCrucible3WarC11numSubDecks11withPlayersACSi_SayAA16TournamentPlayerCGtcfc":{"name":"init(numSubDecks:withPlayers:)","abstract":"<p>Initializes a new game with a deck containing the specified amount of subdecks and with the given players</p>","parent_name":"War"},"Classes/War.html#/s:12CardCrucible3WarC11numSubDecks11withPlayersACSi_SayAA6PlayerCGtcfc":{"name":"init(numSubDecks:withPlayers:)","abstract":"<p>Initializes a new game with a deck containing the specified amount of subdecks and with the given players</p>","parent_name":"War"},"Classes/War.html#/s:12CardCrucible3WarC9addPlayer6playeryAA0E0C_tF":{"name":"addPlayer(player:)","abstract":"<p>Adds the given player to the game as a TournamentPlayer</p>","parent_name":"War"},"Classes/War.html#/s:12CardCrucible3WarC10addPlayers7playersySayAA6PlayerCG_tF":{"name":"addPlayers(players:)","abstract":"<p>Adds a list of players to the game as TournamentPlayers</p>","parent_name":"War"},"Classes/War.html#/s:12CardCrucible3WarC9dealCardsyyF":{"name":"dealCards()","abstract":"<p>Continuously deals cards to all players in the game until the main deck is empty, then returns</p>","parent_name":"War"},"Classes/War.html#/s:12CardCrucible3WarC9startGameyyF":{"name":"startGame()","abstract":"<p>Start a game of War between 2 or more players!</p>","parent_name":"War"},"Classes/War.html#/s:12CardCrucible3WarC10placeCardsSDySSSayAA0A0VGG_AGtyF":{"name":"placeCards()","abstract":"<p>Draws the top card from the cards that each player participating in the game still possesses. If there are no more cards, it then draws from the discard pile associated with the player. If the discard pile is also empty, then it eliminates the player from the game.</p>","parent_name":"War"},"Classes/War.html#/s:12CardCrucible3WarC013determineHighA7HoldersySaySSGSDySSSayAA0A0VGGz_SbtF":{"name":"determineHighCardHolders(_:_:)","abstract":"<p>Determines the player(s) that possessed the highest ranking card in the round</p>","parent_name":"War"},"Classes/War.html#/s:12CardCrucible3WarC3waryySaySSG_SayAA0A0VGztKF":{"name":"war(_:_:)","abstract":"<p>Players must war to determine a round winner, with the winner receiving all of the cards used during the duration of the war..</p>","parent_name":"War"},"Classes/War.html#/s:12CardCrucible3WarC16updateGameStatusyyF":{"name":"updateGameStatus()","abstract":"<p>Checks to see if the game is over and updates the <code>gameover</code> property</p>","parent_name":"War"},"Classes/War.html#/s:12CardCrucible3WarC10startRoundyyF":{"name":"startRound()","abstract":"<p>Has all players place a card during the round and then determines the high card holders of the round and whether there is a round winner or that two or more players need to participate in a war.</p>","parent_name":"War"},"Classes/Game.html#/s:12CardCrucible4GameC8gameDeckAA0E0Vvp":{"name":"gameDeck","abstract":"<p>The deck of cards to be used during the game</p>","parent_name":"Game"},"Classes/Game.html#/s:12CardCrucible4GameC9deckCardsSayAA0A0VGvp":{"name":"deckCards","abstract":"<p>Getter for the cards inside of <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Game.html#/s:12CardCrucible4GameC8gameDeckAA0E0Vvp\">gameDeck</a></code></p>","parent_name":"Game"},"Classes/Game.html#/s:12CardCrucible4GameC10numPlayersSivp":{"name":"numPlayers","abstract":"<p>The number of players participating in the game</p>","parent_name":"Game"},"Classes/Game.html#/s:12CardCrucible4GameC7playersSDySSAA6PlayerCGvp":{"name":"players","abstract":"<p>The players participating in the game</p>","parent_name":"Game"},"Classes/Game.html#/s:12CardCrucible4GameC8gameoverSbvp":{"name":"gameover","abstract":"<p>Flag to see if the game is still in progress or the game is over</p>","parent_name":"Game"},"Classes/Game.html#/s:12CardCrucible4GameC11numSubDecksACSi_tcfc":{"name":"init(numSubDecks:)","abstract":"<p>Initializes a new game with a deck containing the specified amount of subdecks</p>","parent_name":"Game"},"Classes/Game.html#/s:12CardCrucible4GameC11numSubDecks11withPlayersACSi_SayAA6PlayerCGtcfc":{"name":"init(numSubDecks:withPlayers:)","abstract":"<p>Initializes a new game with a deck containing the specified amount of subdecks and with the given players</p>","parent_name":"Game"},"Classes/Game.html#/s:12CardCrucible4GameC9addPlayer6playeryAA0E0C_tF":{"name":"addPlayer(player:)","abstract":"<p>Adds the given player to the game</p>","parent_name":"Game"},"Classes/Game.html#/s:12CardCrucible4GameC10addPlayers7playersySayAA6PlayerCG_tF":{"name":"addPlayers(players:)","abstract":"<p>Adds a list of players to the game</p>","parent_name":"Game"},"Classes/Game.html#/s:12CardCrucible4GameC9dealCardsyyF":{"name":"dealCards()","abstract":"<p>Abstract method to be implemented by subclasses</p>","parent_name":"Game"},"Classes/Game.html#/s:12CardCrucible4GameC05startC0yyF":{"name":"startGame()","abstract":"<p>Abstract method to be implemented by subclasses</p>","parent_name":"Game"},"Classes/AppDelegate.html#/c:@M@CardCrucible@objc(cs)AppDelegate(im)application:didFinishLaunchingWithOptions:":{"name":"application(_:didFinishLaunchingWithOptions:)","abstract":"<p>Undocumented</p>","parent_name":"AppDelegate"},"Classes/AppDelegate.html#/c:@M@CardCrucible@objc(cs)AppDelegate(im)application:configurationForConnectingSceneSession:options:":{"name":"application(_:configurationForConnecting:options:)","abstract":"<p>Undocumented</p>","parent_name":"AppDelegate"},"Classes/AppDelegate.html#/c:@M@CardCrucible@objc(cs)AppDelegate(im)application:didDiscardSceneSessions:":{"name":"application(_:didDiscardSceneSessions:)","abstract":"<p>Undocumented</p>","parent_name":"AppDelegate"},"Classes/AppDelegate.html":{"name":"AppDelegate","abstract":"<p>Undocumented</p>"},"Classes/Game.html":{"name":"Game","abstract":"<p>The minimal logic behind a card game.</p>"},"Classes/War.html":{"name":"War","abstract":"<p>Split the deck equally between all players and then be the first player to collect all the cards in the deck</p>"},"Classes/Player.html":{"name":"Player","abstract":"<p>A representation of a person who is participating in a card game.</p>"},"Classes/SceneDelegate.html":{"name":"SceneDelegate","abstract":"<p>Undocumented</p>"},"Classes/TournamentPlayer.html":{"name":"TournamentPlayer","abstract":"<p>A type of player that is participating in a card game that involves elimination</p>"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Enums.html":{"name":"Enumerations","abstract":"<p>The following enumerations are available globally.</p>"},"Functions.html":{"name":"Functions","abstract":"<p>The following functions are available globally.</p>"},"Protocols.html":{"name":"Protocols","abstract":"<p>The following protocols are available globally.</p>"},"Structs.html":{"name":"Structures","abstract":"<p>The following structures are available globally.</p>"}}